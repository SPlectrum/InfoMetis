#!/bin/bash
# test-fresh-environment.sh
# Verifies that the environment is fresh and ready for InfoMetis k0s deployment

set -eu

CLUSTER_NAME="infometis"

echo "üß™ Testing InfoMetis Fresh Environment..."

# Test Docker availability
test_docker() {
    echo "üìã Test 1: Docker availability"
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker is not installed"
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker daemon is not running"
        return 1
    fi
    
    echo "‚úÖ Docker is installed and running"
    return 0
}

# Test kubectl availability
test_kubectl() {
    echo "üìã Test 2: kubectl availability"
    
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl is not installed"
        return 1
    fi
    
    echo "‚úÖ kubectl is installed"
    return 0
}

# Test no existing k0s containers
test_no_existing_containers() {
    echo "üìã Test 3: No existing k0s containers"
    
    local containers
    containers=$(docker ps -a --format "{{.Names}}" 2>/dev/null | grep -E "^${CLUSTER_NAME}$" || echo "")
    
    if [[ -n "$containers" ]]; then
        echo "‚ö†Ô∏è  Existing k0s containers found:"
        echo "$containers"
        echo "‚ùå Environment is not fresh - k0s containers exist"
        return 1
    fi
    
    echo "‚úÖ No existing k0s containers found"
    return 0
}

# Test Docker network conflicts
test_docker_networks() {
    echo "üìã Test 4: Docker network conflicts"
    
    # Check for networks that might conflict with k0s
    local conflicting_networks
    conflicting_networks=$(docker network ls --format "{{.Name}}" 2>/dev/null | grep -E "(k0s|infometis)" || echo "")
    
    if [[ -n "$conflicting_networks" ]]; then
        echo "‚ö†Ô∏è  Potentially conflicting Docker networks found:"
        echo "$conflicting_networks"
        echo "‚ùå Docker networks may conflict with k0s"
        return 1
    fi
    
    echo "‚úÖ No conflicting Docker networks found"
    return 0
}

# Test port availability
test_port_availability() {
    echo "üìã Test 5: Required port availability"
    
    local ports=(6443 8080 8443)
    local occupied_ports=()
    
    for port in "${ports[@]}"; do
        if netstat -ln 2>/dev/null | grep -q ":${port} " || ss -ln 2>/dev/null | grep -q ":${port} "; then
            occupied_ports+=("$port")
        fi
    done
    
    if [[ ${#occupied_ports[@]} -gt 0 ]]; then
        echo "‚ö†Ô∏è  Some required ports are occupied: ${occupied_ports[*]}"
        echo "‚ùå Port conflicts may prevent proper setup"
        return 1
    fi
    
    echo "‚úÖ All required ports (6443, 8080, 8443) are available"
    return 0
}

# Test kubectl context cleanup
test_kubectl_context_cleanup() {
    echo "üìã Test 6: kubectl context cleanup"
    
    local existing_context
    existing_context=$(kubectl config get-contexts -o name 2>/dev/null | grep "k0s-${CLUSTER_NAME}" || echo "")
    
    if [[ -n "$existing_context" ]]; then
        echo "‚ö†Ô∏è  Existing kubectl context found: $existing_context"
        echo "‚ùå kubectl context may conflict with fresh setup"
        return 1
    fi
    
    echo "‚úÖ No conflicting kubectl contexts found"
    return 0
}

# Test disk space availability
test_disk_space() {
    echo "üìã Test 7: Disk space availability"
    
    # Check available disk space (need at least 2GB for containers)
    local available_space_kb
    available_space_kb=$(df . | tail -1 | awk '{print $4}')
    local available_space_gb=$((available_space_kb / 1024 / 1024))
    
    if [[ $available_space_gb -lt 2 ]]; then
        echo "‚ùå Insufficient disk space: ${available_space_gb}GB available (need at least 2GB)"
        return 1
    fi
    
    echo "‚úÖ Sufficient disk space: ${available_space_gb}GB available"
    return 0
}

# Test container image cache
test_container_cache() {
    echo "üìã Test 8: Container image cache status"
    
    local cache_dir="../../cache/images"
    local cache_files=(
        "k0sproject-k0s-latest.tar"
        "traefik-latest.tar"
        "apache-nifi-latest.tar"
    )
    
    if [[ ! -d "$cache_dir" ]]; then
        echo "‚ö†Ô∏è  Cache directory not found: $cache_dir"
        echo "üìã Cache will be created during deployment"
        return 0
    fi
    
    local cached_count=0
    for cache_file in "${cache_files[@]}"; do
        if [[ -f "$cache_dir/$cache_file" ]]; then
            cached_count=$((cached_count + 1))
        fi
    done
    
    if [[ $cached_count -eq ${#cache_files[@]} ]]; then
        echo "‚úÖ All container images are cached (${cached_count}/${#cache_files[@]})"
        echo "üìã Use --cached flag for faster deployment"
    elif [[ $cached_count -gt 0 ]]; then
        echo "‚ö†Ô∏è  Partial cache found (${cached_count}/${#cache_files[@]} images)"
        echo "üìã Some images will be downloaded during deployment"
    else
        echo "üìã No cached images found - will download during deployment"
    fi
    
    return 0
}

# Display environment info
display_environment_info() {
    echo ""
    echo "üîç Environment Information:"
    echo "=========================="
    echo "‚Ä¢ OS: $(uname -s) $(uname -r)"
    echo "‚Ä¢ Docker: $(docker --version)"
    echo "‚Ä¢ kubectl: $(kubectl version --client 2>/dev/null | head -1)"
    
    if grep -q Microsoft /proc/version 2>/dev/null; then
        echo "‚Ä¢ Platform: WSL (Windows Subsystem for Linux)"
    else
        echo "‚Ä¢ Platform: Native Linux"
    fi
    
    echo "‚Ä¢ Available disk space: $(df -h . | tail -1 | awk '{print $4}')"
    echo "‚Ä¢ Required ports: 6443 (k0s API), 8080 (HTTP), 8443 (HTTPS)"
    echo ""
}

# Main test execution
main() {
    echo "üéØ InfoMetis Fresh Environment Test (k0s)"
    echo "=========================================="
    
    local exit_code=0
    
    # Run all tests
    test_docker || exit_code=1
    test_kubectl || exit_code=1
    test_no_existing_containers || exit_code=1
    test_docker_networks || exit_code=1
    test_port_availability || exit_code=1
    test_kubectl_context_cleanup || exit_code=1
    test_disk_space || exit_code=1
    test_container_cache || exit_code=1
    
    display_environment_info
    
    if [[ $exit_code -eq 0 ]]; then
        echo "üéâ Environment is ready for InfoMetis k0s deployment!"
        echo ""
        echo "‚úÖ GIVEN Docker and kubectl are available"
        echo "‚úÖ WHEN the environment is clean and ports are free"
        echo "‚úÖ THEN k0s cluster setup will succeed"
        echo ""
        echo "üöÄ Next steps:"
        echo "  ‚Ä¢ Run: ./scripts/setup/setup-cluster.sh"
        echo "  ‚Ä¢ Or run: ./scripts/setup/setup-cluster.sh --cached"
        echo "  ‚Ä¢ Then test: ./scripts/test/test-cluster-setup.sh"
        echo ""
    else
        echo "‚ùå Environment issues detected. Please resolve before proceeding."
        echo ""
        echo "üîß Common solutions:"
        echo "  ‚Ä¢ Stop conflicting services on required ports"
        echo "  ‚Ä¢ Remove existing containers: docker rm -f $CLUSTER_NAME"
        echo "  ‚Ä¢ Clean kubectl contexts: kubectl config delete-context k0s-$CLUSTER_NAME"
        echo "  ‚Ä¢ Free up disk space if needed"
        echo ""
    fi
    
    return $exit_code
}

# Execute tests
main "$@"
exit $?